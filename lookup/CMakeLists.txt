cmake_minimum_required (VERSION 2.8)
project (HLV_LOOKUP)
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${HLV_LOOKUP_SOURCE_DIR}/cmake_components")
if (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
    set(CMAKE_CXX_FLAGS "-stdlib=libc++")
endif (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Werror -std=c++11")
find_package(Boost 1.54 EXACT REQUIRED COMPONENTS log log_setup system program_options)
if (Boost_FOUND)
    message("boost found ${Boost_INCLUDE_DIRS} ${Boost_LIBRARIES}")
    include_directories(${Boost_INCLUDE_DIRS})
    add_definitions(-DBOOST_LOG_DYN_LINK)
else ()
    message(FATAL_ERROR "Boost 1.54 not found")
endif(Boost_FOUND)

find_package(Protobuf REQUIRED)
if(PROTOBUF_FOUND)
    include_directories(${PROTOBUF_INCLUDE_DIRS})
    include_directories(${CMAKE_BINARY_DIR})
    PROTOBUF_GENERATE_CPP(HLV_PROTO_SRV_SRC HLV_PROTO_SRV_HDRS ${HLV_LOOKUP_SOURCE_DIR}/../proto/service.proto)
    PROTOBUF_GENERATE_CPP(HLV_PROTO_LKP_SRC HLV_PROTO_LKP_HDRS ${HLV_LOOKUP_SOURCE_DIR}/../proto/lookup.proto)
else()
    message(FATAL_ERROR "Protobuf not found")
endif(PROTOBUF_FOUND)
include_directories(${HLV_LOOKUP_SOURCE_DIR}/../common/include)

find_package(Hiredis REQUIRED)
if(LIBHIREDIS_FOUND)
    include_directories(${LIBHIREDIS_INCLUDE_DIR})
    add_definitions(${LIBHIREDIS_DEFINITIONS})
else()
    message(FATAL_ERROR "Hiredis not found")
endif(LIBHIREDIS_FOUND)


message(${PROTOBUF_LIBRARIES})
file(GLOB hlv_lookup_sources . src/*.cc)
file(GLOB hlv_common_sources . ../common/src/*.cc)
add_executable(hlv_lookup ${HLV_PROTO_SRV_SRC} ${HLV_PROTO_SRV_HDRS} ${HLV_PROTO_LKP_SRC} ${HLV_PROTO_LKP_HDRS} ${hlv_lookup_sources} ${hlv_common_sources})
target_link_libraries(hlv_lookup ${PROTOBUF_LIBRARIES})
target_link_libraries(hlv_lookup ${Boost_LIBRARIES})
target_link_libraries(hlv_lookup ${LIBHIREDIS_LIBRARIES})
if (${CMAKE_SYSTEM_NAME} MATCHES "Linux")
    find_package (Threads)
    target_link_libraries(hlv_lookup ${CMAKE_THREAD_LIBS_INIT})
endif (${CMAKE_SYSTEM_NAME} MATCHES "Linux")

